{"version":3,"sources":["logo.svg","components/NavBar.js","components/AddAppointments.js","components/SearchAppointments.js","components/ListAppointments.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","Navbar","color","NavbarBrand","className","src","logo","height","alt","styles","backgroundColor","cursor","AddAppointments","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleBody","setState","showBody","state","save","e","preventDefault","_this$state","patientName","patientAge","gender","aptDate","aptTime","aptNotes","apt","id","Date","now","objectSpread","formErrors","saveApt","handleChange","event","defineProperty","target","value","displayBody","display","errors","Card","outline","CardHeader","style","onClick","CardBody","FormText","Form","onSubmit","FormGroup","Label","for","Input","type","placeholder","onChange","Alert","Button","block","React","Component","SearchAppointments","handleSort","sort","orderDir","handleOrder","orderBy","handleSearch","search","toggleDropDown","dropdownOpen","InputGroup","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","ListAppointments","_ref","appointments","onDelete","handleDelete","map","item","borderRadius","key","Media","left","top","body","heading","toUTCString","App","saveAppointment","newAppointment","apts","push","deleteAppointment","aptId","aptToDelete","_","find","matchesProperty","parseInt","newApts","without","query","searchText","showAddBody","_this2","fetch","then","res","json","data","catch","error","console","log","filteredApts","forEach","toLowerCase","indexOf","Fragment","components_NavBar","Container","components_AddAppointments","components_SearchAppointments","components_ListAppointments","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.14b053e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5836bc58.svg\";","import React from 'react'\nimport logo from '../logo.svg'\nimport { Navbar, NavbarBrand } from 'reactstrap'\n\nconst NavBar = () => {\n  return (\n    <header>\n      <Navbar color=\"danger\">\n        <NavbarBrand className=\"text-white\"><img src={logo} height=\"48\" className=\"d-inline-block align-center\" alt=\"logo\" /> Apollo</NavbarBrand>\n      </Navbar>\n    </header>\n  )\n}\n\nexport default NavBar\n","import React from 'react'\nimport {\n  Card, CardHeader, CardBody, Form, FormGroup, Label, Input, FormText, Button, Alert\n} from 'reactstrap'\n\nconst styles = { \"backgroundColor\": \"#007bff\", \"color\": \"#ffffff\", \"cursor\": \"pointer\" };\n\nclass AddAppointments extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showBody: false,\n      patientName: \"\",\n      patientAge: \"\",\n      gender: \"\",\n      aptDate: \"\",\n      aptTime: \"\",\n      aptNotes: \"\",\n      formErrors: false\n    };\n  }\n  toggleBody = () => {\n    this.setState({\n      showBody: !this.state.showBody\n    });\n  }\n  save = (e) => {\n    e.preventDefault();\n    const { patientName, patientAge, gender, aptDate, aptTime, aptNotes } = this.state;\n    if (patientName !== \"\" && patientAge !== \"\" && gender !== \"\" && aptDate !== \"\" && aptTime !== \"\" && aptNotes !== \"\") {\n      let apt = {\n        id: Date.now(),\n        patientName: this.state.patientName,\n        patientAge: this.state.patientAge,\n        gender: this.state.gender,\n        aptDate: this.state.aptDate + ' ' + this.state.aptTime,\n        aptNotes: this.state.aptNotes\n      };\n      let clear = {\n        patientName: \"\",\n        patientAge: \"\",\n        gender: \"\",\n        aptDate: \"\",\n        aptTime: \"\",\n        aptNotes: \"\",\n      };\n      this.setState({\n        formErrors: false,\n        showBody: false,\n        ...clear\n      });\n      this.props.saveApt(apt);\n    } else {\n      this.setState({\n        formErrors: true\n      });\n    }\n\n  }\n  handleChange = (event) => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  }\n  render() {\n    let displayBody = {\n      display: this.state.showBody ? 'block' : 'none'\n    };\n    let errors = {\n      display: this.state.formErrors ? 'block' : 'none'\n    };\n    return (\n      <Card className=\"mt-4 mb-4 card-border\" outline color=\"primary\">\n        <CardHeader style={styles} onClick={this.toggleBody}><i className=\"fas fa-plus\"></i> Add New Appointment</CardHeader>\n        <CardBody style={displayBody} id=\"aptBody\">\n          <FormText color=\"muted\" className=\"mb-1\">\n            <span className=\"text-danger\">*</span>All fields are required\n          </FormText>\n          <Form onSubmit={this.save}>\n            <FormGroup>\n              <Label for=\"patientName\">Patient Name</Label>\n              <Input type=\"text\" id=\"patientName\" placeholder=\"Patient's name\" value={this.state.patientName} onChange={this.handleChange} />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"patientAge\">Age</Label>\n              <Input type=\"number\" id=\"patientAge\" placeholder=\"Patient's age\" value={this.state.patientAge} onChange={this.handleChange} />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"gender\">Gender</Label>\n              <Input type=\"select\" id=\"gender\" value={this.state.gender} onChange={this.handleChange} >\n                <option>Select gender</option>\n                <option>Male</option>\n                <option>Female</option>\n              </Input>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"aptDate\">Date</Label>\n              <Input type=\"date\" id=\"aptDate\" value={this.state.aptDate} onChange={this.handleChange} />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"aptTime\">Time</Label>\n              <Input type=\"time\" id=\"aptTime\" value={this.state.aptTime} onChange={this.handleChange} />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"exampleText\">Problem</Label>\n              <Input type=\"textarea\" id=\"aptNotes\" placeholder=\"Notes\" value={this.state.aptNotes} onChange={this.handleChange} />\n            </FormGroup>\n            <Alert color=\"danger\" style={errors}>\n              Please fill all the details\n          </Alert>\n            <Button type=\"submit\" color=\"primary\" block>Add Appointment</Button>\n          </Form>\n        </CardBody>\n      </Card >\n    )\n  }\n}\n\nexport default AddAppointments\n","import React from 'react';\nimport {\n  InputGroup,\n  InputGroupButtonDropdown,\n  Input,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from 'reactstrap';\n\nclass SearchAppointments extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n  handleSort = (e) => {\n    this.props.sort(e.target.id, this.props.orderDir);\n  };\n\n  handleOrder = (e) => {\n    this.props.sort(this.props.orderBy, e.target.id);\n  };\n\n  handleSearch = (e) => {\n    this.props.search(e.target.value);\n  };\n\n  toggleDropDown = () => {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  }\n  render() {\n    return (\n      <InputGroup className=\"mb-3\">\n        <Input id=\"searchField\" placeholder=\"Search appointments by patient name\" type=\"text\" className=\"form-control\" onChange={this.handleSearch} />\n        <InputGroupButtonDropdown addonType=\"append\" isOpen={this.state.dropdownOpen} toggle={this.toggleDropDown}>\n          <DropdownToggle caret color=\"primary\">\n            Sort by\n            </DropdownToggle>\n          <DropdownMenu right>\n            <DropdownItem onClick={this.handleSort} id=\"patientName\">Name {(this.props.orderBy === 'patientName') ? <span className=\"fas fa-check\"></span> : null}</DropdownItem>\n            <DropdownItem onClick={this.handleSort} id=\"patientAge\">Age {(this.props.orderBy === 'patientAge') ? <span className=\"fas fa-check\"></span> : null}</DropdownItem>\n            <DropdownItem onClick={this.handleSort} id=\"gender\">Gender {(this.props.orderBy === 'gender') ? <span className=\"fas fa-check\"></span> : null}</DropdownItem>\n            <DropdownItem divider />\n            <DropdownItem onClick={this.handleOrder} id=\"asc\">Ascending {(this.props.orderDir === 'asc') ? <span className=\"fas fa-check\"></span> : null}</DropdownItem>\n            <DropdownItem onClick={this.handleOrder} id=\"desc\">Descending {(this.props.orderDir === 'dsc') ? <span className=\"fas fa-check\"></span> : null}</DropdownItem>\n          </DropdownMenu>\n        </InputGroupButtonDropdown>\n      </InputGroup>\n    );\n  }\n}\n\nexport default SearchAppointments;\n","import React from 'react'\nimport { Media, Button } from 'reactstrap'\n\nconst ListAppointments = ({ appointments, onDelete }) => {\n  const handleDelete = (event) => {\n    onDelete(event.target.id);\n  }\n  return (\n    <ul>\n      {appointments.map((item) => {\n        return (\n          <li className=\"p-1 card-border shadow-sm p-3 mb-3 bg-white rounded\" style={{ \"borderRadius\": \"0.25rem\" }} key={item.id}>\n            <Media>\n              <Media left top>\n                <Button color=\"danger\" className=\"mr-3 delete-btn\"><i id={item.id} onClick={handleDelete} className=\"fas fa-times\"></i></Button>\n              </Media>\n              <Media body>\n                <Media heading className=\"m-0\">\n                  {item.patientName}\n                </Media>\n                <p className=\"mt-4 mb-0\"><span className=\"font-weight-bold\">Age:</span> {item.patientAge} <span className=\"font-weight-bold\">Gender:</span> {item.gender}</p>\n                <p><span className=\"font-weight-bold\">Problem:</span> {item.aptNotes}</p>\n                <p className=\"mb-0\"><span className=\"font-weight-bold\">Checkup time:</span> {(new Date(item.aptDate)).toUTCString()}</p>\n              </Media>\n            </Media>\n          </li>\n        )\n      })}\n    </ul>\n  );\n}\n\nexport default ListAppointments\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport { Container } from 'reactstrap';\nimport NavBar from './components/NavBar';\nimport AddAppointments from './components/AddAppointments';\nimport SearchAppointments from './components/SearchAppointments';\nimport ListAppointments from './components/ListAppointments';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      appointments: [],\n      showAddBody: false,\n      orderBy: 'patientName',\n      orderDir: 'asc',\n      searchText: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('./data.json')\n      .then(res => res.json())\n      .then(data => this.setState({\n        appointments: data\n      }))\n      .catch(error => console.log('There has been a problem with fetching appointments.'))\n  }\n\n  saveAppointment = (newAppointment) => {\n    let apts = this.state.appointments;\n    apts.push(newAppointment);\n    this.setState({\n      appointments: apts\n    });\n  }\n  deleteAppointment = (aptId) => {\n    let apts = this.state.appointments;\n    let aptToDelete = _.find(apts, _.matchesProperty('id', parseInt(aptId, 10)));\n    const newApts = _.without(apts, aptToDelete)\n    this.setState({\n      appointments: newApts\n    });\n  }\n\n  sort = (orderBy, orderDir) => {\n    this.setState({\n      orderBy: orderBy,\n      orderDir: orderDir\n    });\n  }\n\n  search = (query) => {\n    this.setState({\n      searchText: query\n    });\n  }\n\n  render() {\n    let filteredApts = [];\n    let { orderBy, orderDir, searchText, appointments } = this.state;\n\n    appointments.forEach((item) => {\n      if (item.patientName.toLowerCase().indexOf(searchText) !== -1) {\n        filteredApts.push(item);\n      }\n    });\n\n    filteredApts = _.orderBy(filteredApts, orderBy, orderDir);\n\n\n    return (\n      <>\n        <NavBar />\n        <Container>\n          <AddAppointments saveApt={this.saveAppointment} />\n          <SearchAppointments sort={this.sort} search={this.search} orderBy={this.state.orderBy} orderDir={this.state.orderDir} />\n          <ListAppointments appointments={filteredApts} onDelete={this.deleteAppointment} />\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}